@page "/checkout"
@attribute [Authorize]
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject OrdersClient OrdersClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components

<PageTitle>Blazing Pizza - Checkout</PageTitle>

<div class="main">
    <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
                <br />
                <label>Payment Method</label>

                <MudSelect Placeholder="Select Payment Method" ToStringFunc="@convertFunc" HelperText="Payment Methods" @bind-Value="OrderState.Order.PaymentMethod" CloseIcon="@Icons.Material.Filled.Flag" AdornmentColor="Color.Tertiary">
                    @if (pMethods != null)
                    {
                        @foreach (var item in pMethods)
                        {
                            <MudSelectItem Value="@item" >@item.Name </MudSelectItem>
                        }
                    }
                </MudSelect>
                @*<select class="form-control" bind-value="@OrderState.Order?.PaymentMethod?.Id">
                   
                    @if (pMethods != null)
                    {
                        @foreach (var item in pMethods)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                    
                </select>*@
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>
        <div style="text-align:center">
            <MudButton Class="" Disabled="@isSubmitting" OnClick="PlaceOrder" Variant="MudBlazor.Variant.Filled" Color="Color.Primary">
                @if (isSubmitting)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Place Order</MudText>
                }
            </MudButton>
        </div>
     
        @* <button type="submit" class="checkout-button btn btn-warning" disabled="@isSubmitting">
        Place order
        </button>*@

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    bool isSubmitting;
    private bool _processing = false;
    private List<PaymentMethod> pMethods = new List<PaymentMethod>();
    private int PaymentMethodId { get; set; }
    private Func<PaymentMethod, string> convertFunc = ci => ci?.Name;

    protected override async Task OnInitializedAsync()
    {
        _ = RequestNotificationSubscriptionAsync();
        await LoadDataAsync();
    }
    
    protected async Task LoadDataAsync()
    {
       
        pMethods = await HttpClient.GetFromJsonAsync<List<PaymentMethod>>("/payment");
    }
    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null)
        {
            try
            {
                await OrdersClient.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }

    async Task PlaceOrder()
    {
        isSubmitting = true;

        try
        {
            var newOrderId = await OrdersClient.PlaceOrder(OrderState.Order);
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
}
